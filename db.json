{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/My-New-Post.md","hash":"7794da812bac5419341223d5d12ae5e8396936a9","modified":1688719875101},{"_id":"source/_posts/css-modules.md","hash":"3c2e7eb9c6adb74d0087757b705297dbca9e6ec9","modified":1688722035664},{"_id":"source/_posts/hello-world.md","hash":"bed22694da31a79bd732e8ec1fef132aaeb3b410","modified":1688718583153},{"_id":"source/my-page/index.md","hash":"9023507d0844beae21c7f34ae4ec666abcfff3a1","modified":1684307833974},{"_id":"source/images/1.png","hash":"912224038210aed13060bef917b97a42a85a926a","modified":1688719633817},{"_id":"source/images/3.png","hash":"fef819c0dea48117717d0f90c5dfe5e3f1d2ed43","modified":1688721920935},{"_id":"source/images/2.png","hash":"566c456d2638403993fd08aabaf968d4c1cedac0","modified":1688721918112},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1684304955226},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1684304955226},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1684304955226},{"_id":"themes/butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":1684304955226},{"_id":"themes/butterfly/package.json","hash":"f19dc1e0af33b877bab3c2f50257430ccfcc064d","modified":1684304955248},{"_id":"themes/butterfly/plugins.yml","hash":"acc74f24c7e94fe9ded264307a4201c9b410cd9b","modified":1684304955248},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1684304955227},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1684304955227},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1684304955227},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1684304955227},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1684304955228},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1684304955228},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1684304955247},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1684304955247},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1684304955247},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1684304955248},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1684304955225},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1684304955225},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1684304955225},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1684304955225},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1684304955226},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1684304955228},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1684304955228},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1684304955228},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1684304955228},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1684304955231},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1684304955233},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1684304955234},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1684304955234},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1684304955248},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1684304955248},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1684304955249},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1684304955249},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1684304955249},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1684304955249},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1684304955249},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1684304955250},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1684304955250},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1684304955250},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1684304955250},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1684304955250},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1684304955251},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1684304955251},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1684304955251},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1684304955251},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1684304955254},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1684304955254},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1684304955254},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1684304955254},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1684304955254},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1684304955255},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1684304955255},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1684304955255},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1684304955255},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1684304955265},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1684304955265},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1684304955266},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1684304955266},{"_id":"themes/butterfly/source/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1684304955267},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1684304955267},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1684304955268},{"_id":"themes/butterfly/source/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1684304955268},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1684304955229},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1684304955229},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1684304955229},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1684304955229},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1684304955229},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1684304955230},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1684304955231},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1684304955231},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1684304955231},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1684304955231},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1684304955232},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1684304955233},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1684304955233},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1684304955233},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1684304955233},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1684304955234},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1684304955240},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1684304955243},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1684304955243},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1684304955243},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"13015a98d0d5e1ef2cec294231529010395b19de","modified":1684304955245},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1684304955245},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1684304955245},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1684304955245},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1684304955246},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1684304955247},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1684304955247},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1684304955247},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1684304955256},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"de10b113f9cb9a68d257a39d6409905acfd559ef","modified":1684304955256},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1684304955256},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1684304955258},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1684304955258},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1684304955258},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1684304955258},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1684304955259},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1684304955259},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1684304955259},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1684304955259},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1684304955259},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1684304955260},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1684304955260},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1684304955260},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1684304955260},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1684304955260},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1684304955261},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1684304955261},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1684304955261},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1684304955261},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1684304955261},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1684304955262},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1684304955262},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1684304955262},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1684304955262},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1684304955262},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1684304955263},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1684304955263},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1684304955263},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1684304955263},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1684304955263},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1684304955264},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1684304955264},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1684304955264},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1684304955265},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1684304955265},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1684304955265},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1684304955265},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1684304955268},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1684304955268},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1684304955234},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1684304955234},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"4ff8e67cd1c9058c0c894737b9b247a812079ae2","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1684304955235},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1684304955236},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1684304955236},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1684304955236},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1684304955237},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1684304955237},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1684304955237},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1684304955237},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1684304955237},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"90779382c8675e5a0b2d1ef2250294de926707f4","modified":1684304955238},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1684304955238},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1684304955238},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1684304955238},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1684304955238},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1684304955239},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1684304955239},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1684304955239},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1684304955239},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1684304955239},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1684304955240},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1684304955240},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1684304955240},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1684304955240},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1684304955241},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1684304955241},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1684304955241},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d92bbf51626fcc5608b53273cf40db0b5b69c0d4","modified":1684304955241},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"3942d6643683a3c42bbb5f4cf4a7df21debb8498","modified":1684304955241},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1684304955242},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"531d7b6992a737742f7b3ae343e1f03aab947f4c","modified":1684304955243},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1684304955243},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1684304955244},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1684304955245},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1684304955256},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1684304955257},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1684304955257},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1684304955257},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1684304955257},{"_id":"public/my-page/index.html","hash":"02b84be017e61bb2c2b7f8ebc0ee53d6ca207217","modified":1688727741930},{"_id":"public/archives/index.html","hash":"d596788ce0f0411eb1ddf98a1908c3f85d1b9b06","modified":1688727741930},{"_id":"public/archives/2023/index.html","hash":"0417505366cf51aae0c18901ceff85afb1ce46c2","modified":1688727741930},{"_id":"public/archives/2023/05/index.html","hash":"96d4173dff66e26f895d1ad0c23255cf20c8dba6","modified":1688727741930},{"_id":"public/2023/07/07/css-modules/index.html","hash":"e3bb6de1cf2f9cd6a1fc2ab2262b51c49b97e67f","modified":1688727741930},{"_id":"public/2023/05/16/My-New-Post/index.html","hash":"23b65db504f7610ad54326cd8818f2cb3c0e781b","modified":1688727741930},{"_id":"public/2023/05/16/hello-world/index.html","hash":"85fe5e6662fb0e0642fc88b01bdda200bb19506d","modified":1688727741930},{"_id":"public/archives/2023/07/index.html","hash":"0c0eb4f6bc8a0fa7fe4d88a57625a1a456c567be","modified":1688727741930},{"_id":"public/index.html","hash":"50ae04312ff100950d4c8a730e16a5a6c19508d2","modified":1688727741930},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1688722096207},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1688722096207},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1688722096207},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688722096207},{"_id":"public/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1688722096207},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1688722096207},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1688722096207},{"_id":"public/css/index.css","hash":"2909ac961debcc749507ff42036e833d52207050","modified":1688722096207},{"_id":"public/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1688722096207},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1688722096207},{"_id":"public/images/3.png","hash":"fef819c0dea48117717d0f90c5dfe5e3f1d2ed43","modified":1688722096207},{"_id":"public/images/1.png","hash":"912224038210aed13060bef917b97a42a85a926a","modified":1688722096207},{"_id":"public/images/2.png","hash":"566c456d2638403993fd08aabaf968d4c1cedac0","modified":1688722096207},{"_id":"source/_posts/commitlint.md","hash":"e7a69124d54e247f70188794c8637bfb747c3e74","modified":1688723550473},{"_id":"source/_posts/webpack.md","hash":"66a11a70bcee76d9c696c5387a19e69040ca034b","modified":1688723246586},{"_id":"public/2023/07/07/commitlint/index.html","hash":"d2069b0ff4bcc7d77e50b6f5ad44e4e843e48597","modified":1688727741930},{"_id":"public/2023/07/07/webpack/index.html","hash":"d6b375f6481c3bcba7e613763b4b8a200492f478","modified":1688727741930}],"Category":[],"Data":[],"Page":[{"title":"my-page","date":"2023-05-17T06:55:30.000Z","_content":"","source":"my-page/index.md","raw":"---\ntitle: my-page\ndate: 2023-05-17 14:55:30\n---\n","updated":"2023-05-17T07:17:13.974Z","path":"my-page/index.html","comments":1,"layout":"page","_id":"cljsdj92g000055li3y9wfgjq","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"eslint和prettier","date":"2023-05-16T10:47:23.000Z","_content":"#### eslint / prettier如何做到规范代码的\n\nESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。下面是它们如何规范代码的简要介绍：\n\n###### ●ESLint\n\n○语法检查:  ESLint 可以检查代码中是否存在语法错误，例如未定义的变量、语法错误的表达式等\n○代码风格检查:  ESLint 可以检查代码的风格是否符合规范，例如缩进、变量命名、空格等\n○安全性检查:  ESLint 可以检查代码中是否存在安全漏洞，例如 XSS 攻击、SQL 注入等\n○自定义规则:  ESLint 提供了丰富的规则配置，开发人员可以根据自己的需要自定义规则并进行代码检查\n\n###### ●Prettier\n\n○代码格式化: 可以自动格式化代码，使代码符合规范，并保持一致的风格\n○代码布局: 可以自动调整代码的布局，使代码易于阅读和理解\n○多语言支持: 支持多种编程语言，例如 JavaScript、TypeScript、CSS、Markdown 等\n\n#### eslint / prettier之间的关系\n\n  ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。虽然它们都可以用于规范代码，但它们之间有不同的关注点和使用方式。\nESLint 主要用于检查代码风格和语法错误，可以通过配置文件来定制自己的代码风格规范，并提供了丰富的插件和扩展，可以支持各种语言和框架。ESLint 的作用是在编码过程中及时发现和解决代码问题，从而提高代码质量和可维护性。\nPrettier 主要用于代码格式化，可以对代码进行自动格式化，使代码符合统一的规范和风格。开发人员可以通过配置文件来定制自己的代码格式化规范，并支持多种语言和框架。Prettier 的作用是将已经编写好的代码快速地格式化成一个统一的格式，从而使代码更加易读、易维护、易扩展。\nESLint 和 Prettier 可以结合使用，通过使用 eslint-plugin-prettier 插件和 eslint-config-prettier 配置来将 Prettier 集成到 ESLint 中。这样可以使用 ESLint 来检查代码风格和语法错误，并使用 Prettier 来进行代码格式化。结合使用可以提高代码质量和开发效率，同时也能够使代码更加统一和规范。\n总之，ESLint 和 Prettier 都是前端开发中常用的代码规范工具，虽然它们之间有不同的关注点和使用方式，但可以结合使用来提高代码质量和开发效率。\n\n#### eslint/prettier 在react和vue项目中如何使用\n\n###### ●react项目\n\n○安装eslint/prettier相关插件\nnpm install eslint prettier eslint-plugin-react eslint-config-prettier eslint-plugin-prettier --save-dev\n\n○创建.eslintrc.json配置文件\n\n``` js\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:prettier/recommended\",\n    \"prettier/react\"\n  ],\n  \"plugins\": [\"react\", \"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": [\"error\", {}, { \"usePrettierrc\": true }]\n  }\n}\n```\n\n○创建.prettierrc.json配置文件\n\n``` js\n{\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"jsxSingleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true,\n  \"jsxBracketSameLine\": false,\n  \"arrowParens\": \"always\"\n}\n```\n\n○在编辑器中安装并配置eslint和prettier插件，例如 VS Code中可以安装ESLint和Prettier插件，并在setting.json文件中添加以下配置\n\n``` js\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n},\n```\n\n###### ●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint/prettier插件有区别，最下面👇再来解释一下为什么\n\n○安装eslint/prettier相关插件\n\n``` js\nnpm install eslint prettier eslint-plugin-vue eslint-config-prettier eslint-plugin-prettier --save-dev\n```\n\n○创建.eslintrc.json配置文件\n\n``` js\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:vue/recommended\",\n    \"plugin:prettier/recommended\",\n    \"prettier/vue\"\n  ],\n  \"plugins\": [\"vue\", \"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": [\"error\", {}, { \"usePrettierrc\": true }]\n  }\n}\n```\n\n○创建.prettierrc.json配置文件\n\n```js\n{\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true\n}\n```\n\n○在编辑中安装eslint和prettier插件，例如VS Code中可以安装ESLint和Prettier插件，并在setting.json中添加以下配置\n\n``` js\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n},\n```\n\n(vue和react存在模版语法、组件命名、状态管理等方面的差异，隐藏需要根据具体框架使用合适的插件和扩展，以确保代码可读性和可维护性，提高代码质量和开发效率\n（1）模版语法： 在vue中，模版语法是一种重要的语法结构，需要进行检查和规范，可以使用eslint-plugin-vue来检查模版语法问题；而在react中，通常使用jsx语法来定义组件，可以使用eslint-plugin-react来检查jsx相关代码\n（2）组件命名：在vue中，组件命名采用kebab-case(短横线命名法），例如my-component。而在react中，采用PascalCase（大驼峰），例如MyComponent。需要根据具体的框架选择合适的命名规范\n（3）状态管理，在vue中使用vuex，react中使用redux\\mobx等状态管理库\n（4）插件和扩展：vue和react需要使用不同的扩展工具，例如：eslint-plugin-react和eslint-plugin-vue\n\n#### 怎么自定义规范（实践）\n\n(1)使用官方生成自定义eslint规范的脚手架工具\n\n``` js\n// 安装环境\nnpm i -g yo\nnpm i -g generator-eslint\n// cd 要放置项目的文件夹，创建项目\nyo eslint:plugin\n//下面是创建之后需要输入的信息\n//yo eslint:rule\n//What is your name? 随便写个你的名字\n//What is the plugin ID? 你的插件的id，推荐(eslint-plugin-xxx)的命名方式\n//Type a short description of this plugin: 描述你的插件是干啥的\n//Does this plugin contain custom ESLint rules? Yes\n//Does this plugin contain one or more processors? Yes\n```\n\n生成下面目录\n\n(2)在lib/rules/my-custom-rules1.js中写自定义的规则，下面是基本模版\n\n```js\nmodule.exports = {\n    // meta里面的元数据，对于我们自定义规则，其实只关心schema就行了\n    meta: {\n        // 规则的类型problem|suggestion|layout\n        // problem: 这条规则识别的代码可能会导致错误或让人迷惑。应该优先解决这个问题\n        // suggestion: 这条规则识别的代码不会导致错误，但是建议用更好的方式\n        // layout: 表示这条规则主要关心像空格、分号等这种问题\n        type: \"suggestion\",\n        // 对于自定义规则，docs字段是非必须的\n        docs: {\n            description: \"描述你的规则是干啥的\",\n            // 规则的分类，假如你把这条规则提交到eslint核心规则里，那eslint官网规则的首页会按照这个字段进行分类展示\n            category: \"Possible Errors\",\n            // 假如你把规则提交到eslint核心规则里\n            // 且像这样extends: ['eslint:recommended']继承规则的时候，这个属性是true，就会启用这条规则\n            recommended: true,\n            // 你的规则使用文档的url\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\n        },\n        // 标识这条规则是否可以修复，假如没有这属性，即使你在下面那个create方法里实现了fix功能，eslint也不会帮你修复\n        fixable: \"code\",\n        // 这里定义了这条规则需要的参数\n        // 比如我们是这样使用带参数的rule的时候，rules: { myRule: ['error', param1, param2....]}\n        // error后面的就是参数，而参数就是在这里定义的\n        schema: []\n    },\n    create: function(context) {\n        // 这是最重要的方法，我们对代码的校验就是在这里做的\n        return {\n            // callback functions\n        };\n    }\n};\n```\n\n接下来介绍creact方法\n eslint校验代码其实是解析文件内容，通过AST(抽象语法树）生成一个对象，再检查这个对象是否符合我们的要求，如果不符合要求就报出错误\n下面举例\n\n```js\nenum myEnumText {\nfirstName = 1\n}\n```\n\n//下面是它的AST形式\n\n```js\n  sourceType: module\n  body: [\n    EnumDeclaration: {\n      id: Identifier {\n        name: \"myEnumText\"\n      }\n      body: {\n        type: EnumBooleanBody\n        members: [\n          EnumBooleanMember: {\n            id: Identifier {\n              name: \"firstName\"\n            }\n            init: NumericLiteral {\n              value: 1\n            }\n          }\n        ]\n      }\n    }\n  ]\n```\n\n从上面代码可以看出，enum类型的声明变量名是EnumDeclaration，并且通过node.id.name可以获取到声明的变量名，我们通过正则可以校验这个变量名是否以E开头，如果不以E开头就报错或者警告\n![](../images/1.png)\n（3）接下来是怎么在项目中使用（这里我的插件名称是eslint-plugin-st-rules\n●将上面的项目发布成npm插件，npm login / npm publish\n\n```js\nnpm login --registry=\"具体发包地址\"\nnpm publish --registry=\"具体发包地址\"\n```\n\n●在项目中npm install  eslint-plugin-rules\n\n```js\nnpm install  eslint-plugin-rules --\"具体发包地址\"\n```\n\n●在.eslintrc.js中  (在这里可以省略eslint-plugin-)\n\n```js\n plugins: ['st-rules'],\n  rules: {\n    'st-rules/type-prefix': 'warn', // type类型要用T开头\n    'st-rules/interface-prefix': 'warn', // interface类型要用I开头\n    'st-rules/enum-prefix': 'warn', // enum类型要用E开头\n    'st-rules/variable-name-camelcase': 'warn', // let var定义的变量需要用小驼峰\n  },\n```\n\n⚠️更改了.eslintrc.js文件，需要关掉项目重新打开才会生效\n","source":"_posts/My-New-Post.md","raw":"---\ntitle: eslint和prettier\ndate: 2023-05-16 18:47:23\ntags:\n---\n#### eslint / prettier如何做到规范代码的\n\nESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。下面是它们如何规范代码的简要介绍：\n\n###### ●ESLint\n\n○语法检查:  ESLint 可以检查代码中是否存在语法错误，例如未定义的变量、语法错误的表达式等\n○代码风格检查:  ESLint 可以检查代码的风格是否符合规范，例如缩进、变量命名、空格等\n○安全性检查:  ESLint 可以检查代码中是否存在安全漏洞，例如 XSS 攻击、SQL 注入等\n○自定义规则:  ESLint 提供了丰富的规则配置，开发人员可以根据自己的需要自定义规则并进行代码检查\n\n###### ●Prettier\n\n○代码格式化: 可以自动格式化代码，使代码符合规范，并保持一致的风格\n○代码布局: 可以自动调整代码的布局，使代码易于阅读和理解\n○多语言支持: 支持多种编程语言，例如 JavaScript、TypeScript、CSS、Markdown 等\n\n#### eslint / prettier之间的关系\n\n  ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。虽然它们都可以用于规范代码，但它们之间有不同的关注点和使用方式。\nESLint 主要用于检查代码风格和语法错误，可以通过配置文件来定制自己的代码风格规范，并提供了丰富的插件和扩展，可以支持各种语言和框架。ESLint 的作用是在编码过程中及时发现和解决代码问题，从而提高代码质量和可维护性。\nPrettier 主要用于代码格式化，可以对代码进行自动格式化，使代码符合统一的规范和风格。开发人员可以通过配置文件来定制自己的代码格式化规范，并支持多种语言和框架。Prettier 的作用是将已经编写好的代码快速地格式化成一个统一的格式，从而使代码更加易读、易维护、易扩展。\nESLint 和 Prettier 可以结合使用，通过使用 eslint-plugin-prettier 插件和 eslint-config-prettier 配置来将 Prettier 集成到 ESLint 中。这样可以使用 ESLint 来检查代码风格和语法错误，并使用 Prettier 来进行代码格式化。结合使用可以提高代码质量和开发效率，同时也能够使代码更加统一和规范。\n总之，ESLint 和 Prettier 都是前端开发中常用的代码规范工具，虽然它们之间有不同的关注点和使用方式，但可以结合使用来提高代码质量和开发效率。\n\n#### eslint/prettier 在react和vue项目中如何使用\n\n###### ●react项目\n\n○安装eslint/prettier相关插件\nnpm install eslint prettier eslint-plugin-react eslint-config-prettier eslint-plugin-prettier --save-dev\n\n○创建.eslintrc.json配置文件\n\n``` js\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:prettier/recommended\",\n    \"prettier/react\"\n  ],\n  \"plugins\": [\"react\", \"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": [\"error\", {}, { \"usePrettierrc\": true }]\n  }\n}\n```\n\n○创建.prettierrc.json配置文件\n\n``` js\n{\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"jsxSingleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true,\n  \"jsxBracketSameLine\": false,\n  \"arrowParens\": \"always\"\n}\n```\n\n○在编辑器中安装并配置eslint和prettier插件，例如 VS Code中可以安装ESLint和Prettier插件，并在setting.json文件中添加以下配置\n\n``` js\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n},\n```\n\n###### ●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint/prettier插件有区别，最下面👇再来解释一下为什么\n\n○安装eslint/prettier相关插件\n\n``` js\nnpm install eslint prettier eslint-plugin-vue eslint-config-prettier eslint-plugin-prettier --save-dev\n```\n\n○创建.eslintrc.json配置文件\n\n``` js\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:vue/recommended\",\n    \"plugin:prettier/recommended\",\n    \"prettier/vue\"\n  ],\n  \"plugins\": [\"vue\", \"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": [\"error\", {}, { \"usePrettierrc\": true }]\n  }\n}\n```\n\n○创建.prettierrc.json配置文件\n\n```js\n{\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true\n}\n```\n\n○在编辑中安装eslint和prettier插件，例如VS Code中可以安装ESLint和Prettier插件，并在setting.json中添加以下配置\n\n``` js\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n},\n```\n\n(vue和react存在模版语法、组件命名、状态管理等方面的差异，隐藏需要根据具体框架使用合适的插件和扩展，以确保代码可读性和可维护性，提高代码质量和开发效率\n（1）模版语法： 在vue中，模版语法是一种重要的语法结构，需要进行检查和规范，可以使用eslint-plugin-vue来检查模版语法问题；而在react中，通常使用jsx语法来定义组件，可以使用eslint-plugin-react来检查jsx相关代码\n（2）组件命名：在vue中，组件命名采用kebab-case(短横线命名法），例如my-component。而在react中，采用PascalCase（大驼峰），例如MyComponent。需要根据具体的框架选择合适的命名规范\n（3）状态管理，在vue中使用vuex，react中使用redux\\mobx等状态管理库\n（4）插件和扩展：vue和react需要使用不同的扩展工具，例如：eslint-plugin-react和eslint-plugin-vue\n\n#### 怎么自定义规范（实践）\n\n(1)使用官方生成自定义eslint规范的脚手架工具\n\n``` js\n// 安装环境\nnpm i -g yo\nnpm i -g generator-eslint\n// cd 要放置项目的文件夹，创建项目\nyo eslint:plugin\n//下面是创建之后需要输入的信息\n//yo eslint:rule\n//What is your name? 随便写个你的名字\n//What is the plugin ID? 你的插件的id，推荐(eslint-plugin-xxx)的命名方式\n//Type a short description of this plugin: 描述你的插件是干啥的\n//Does this plugin contain custom ESLint rules? Yes\n//Does this plugin contain one or more processors? Yes\n```\n\n生成下面目录\n\n(2)在lib/rules/my-custom-rules1.js中写自定义的规则，下面是基本模版\n\n```js\nmodule.exports = {\n    // meta里面的元数据，对于我们自定义规则，其实只关心schema就行了\n    meta: {\n        // 规则的类型problem|suggestion|layout\n        // problem: 这条规则识别的代码可能会导致错误或让人迷惑。应该优先解决这个问题\n        // suggestion: 这条规则识别的代码不会导致错误，但是建议用更好的方式\n        // layout: 表示这条规则主要关心像空格、分号等这种问题\n        type: \"suggestion\",\n        // 对于自定义规则，docs字段是非必须的\n        docs: {\n            description: \"描述你的规则是干啥的\",\n            // 规则的分类，假如你把这条规则提交到eslint核心规则里，那eslint官网规则的首页会按照这个字段进行分类展示\n            category: \"Possible Errors\",\n            // 假如你把规则提交到eslint核心规则里\n            // 且像这样extends: ['eslint:recommended']继承规则的时候，这个属性是true，就会启用这条规则\n            recommended: true,\n            // 你的规则使用文档的url\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\n        },\n        // 标识这条规则是否可以修复，假如没有这属性，即使你在下面那个create方法里实现了fix功能，eslint也不会帮你修复\n        fixable: \"code\",\n        // 这里定义了这条规则需要的参数\n        // 比如我们是这样使用带参数的rule的时候，rules: { myRule: ['error', param1, param2....]}\n        // error后面的就是参数，而参数就是在这里定义的\n        schema: []\n    },\n    create: function(context) {\n        // 这是最重要的方法，我们对代码的校验就是在这里做的\n        return {\n            // callback functions\n        };\n    }\n};\n```\n\n接下来介绍creact方法\n eslint校验代码其实是解析文件内容，通过AST(抽象语法树）生成一个对象，再检查这个对象是否符合我们的要求，如果不符合要求就报出错误\n下面举例\n\n```js\nenum myEnumText {\nfirstName = 1\n}\n```\n\n//下面是它的AST形式\n\n```js\n  sourceType: module\n  body: [\n    EnumDeclaration: {\n      id: Identifier {\n        name: \"myEnumText\"\n      }\n      body: {\n        type: EnumBooleanBody\n        members: [\n          EnumBooleanMember: {\n            id: Identifier {\n              name: \"firstName\"\n            }\n            init: NumericLiteral {\n              value: 1\n            }\n          }\n        ]\n      }\n    }\n  ]\n```\n\n从上面代码可以看出，enum类型的声明变量名是EnumDeclaration，并且通过node.id.name可以获取到声明的变量名，我们通过正则可以校验这个变量名是否以E开头，如果不以E开头就报错或者警告\n![](../images/1.png)\n（3）接下来是怎么在项目中使用（这里我的插件名称是eslint-plugin-st-rules\n●将上面的项目发布成npm插件，npm login / npm publish\n\n```js\nnpm login --registry=\"具体发包地址\"\nnpm publish --registry=\"具体发包地址\"\n```\n\n●在项目中npm install  eslint-plugin-rules\n\n```js\nnpm install  eslint-plugin-rules --\"具体发包地址\"\n```\n\n●在.eslintrc.js中  (在这里可以省略eslint-plugin-)\n\n```js\n plugins: ['st-rules'],\n  rules: {\n    'st-rules/type-prefix': 'warn', // type类型要用T开头\n    'st-rules/interface-prefix': 'warn', // interface类型要用I开头\n    'st-rules/enum-prefix': 'warn', // enum类型要用E开头\n    'st-rules/variable-name-camelcase': 'warn', // let var定义的变量需要用小驼峰\n  },\n```\n\n⚠️更改了.eslintrc.js文件，需要关掉项目重新打开才会生效\n","slug":"My-New-Post","published":1,"updated":"2023-07-07T08:51:15.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsdj92j000155lifz2aggdm","content":"<h4 id=\"eslint-x2F-prettier如何做到规范代码的\"><a href=\"#eslint-x2F-prettier如何做到规范代码的\" class=\"headerlink\" title=\"eslint &#x2F; prettier如何做到规范代码的\"></a>eslint &#x2F; prettier如何做到规范代码的</h4><p>ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。下面是它们如何规范代码的简要介绍：</p>\n<h6 id=\"●ESLint\"><a href=\"#●ESLint\" class=\"headerlink\" title=\"●ESLint\"></a>●ESLint</h6><p>○语法检查:  ESLint 可以检查代码中是否存在语法错误，例如未定义的变量、语法错误的表达式等<br>○代码风格检查:  ESLint 可以检查代码的风格是否符合规范，例如缩进、变量命名、空格等<br>○安全性检查:  ESLint 可以检查代码中是否存在安全漏洞，例如 XSS 攻击、SQL 注入等<br>○自定义规则:  ESLint 提供了丰富的规则配置，开发人员可以根据自己的需要自定义规则并进行代码检查</p>\n<h6 id=\"●Prettier\"><a href=\"#●Prettier\" class=\"headerlink\" title=\"●Prettier\"></a>●Prettier</h6><p>○代码格式化: 可以自动格式化代码，使代码符合规范，并保持一致的风格<br>○代码布局: 可以自动调整代码的布局，使代码易于阅读和理解<br>○多语言支持: 支持多种编程语言，例如 JavaScript、TypeScript、CSS、Markdown 等</p>\n<h4 id=\"eslint-x2F-prettier之间的关系\"><a href=\"#eslint-x2F-prettier之间的关系\" class=\"headerlink\" title=\"eslint &#x2F; prettier之间的关系\"></a>eslint &#x2F; prettier之间的关系</h4><p>  ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。虽然它们都可以用于规范代码，但它们之间有不同的关注点和使用方式。<br>ESLint 主要用于检查代码风格和语法错误，可以通过配置文件来定制自己的代码风格规范，并提供了丰富的插件和扩展，可以支持各种语言和框架。ESLint 的作用是在编码过程中及时发现和解决代码问题，从而提高代码质量和可维护性。<br>Prettier 主要用于代码格式化，可以对代码进行自动格式化，使代码符合统一的规范和风格。开发人员可以通过配置文件来定制自己的代码格式化规范，并支持多种语言和框架。Prettier 的作用是将已经编写好的代码快速地格式化成一个统一的格式，从而使代码更加易读、易维护、易扩展。<br>ESLint 和 Prettier 可以结合使用，通过使用 eslint-plugin-prettier 插件和 eslint-config-prettier 配置来将 Prettier 集成到 ESLint 中。这样可以使用 ESLint 来检查代码风格和语法错误，并使用 Prettier 来进行代码格式化。结合使用可以提高代码质量和开发效率，同时也能够使代码更加统一和规范。<br>总之，ESLint 和 Prettier 都是前端开发中常用的代码规范工具，虽然它们之间有不同的关注点和使用方式，但可以结合使用来提高代码质量和开发效率。</p>\n<h4 id=\"eslint-x2F-prettier-在react和vue项目中如何使用\"><a href=\"#eslint-x2F-prettier-在react和vue项目中如何使用\" class=\"headerlink\" title=\"eslint&#x2F;prettier 在react和vue项目中如何使用\"></a>eslint&#x2F;prettier 在react和vue项目中如何使用</h4><h6 id=\"●react项目\"><a href=\"#●react项目\" class=\"headerlink\" title=\"●react项目\"></a>●react项目</h6><p>○安装eslint&#x2F;prettier相关插件<br>npm install eslint prettier eslint-plugin-react eslint-config-prettier eslint-plugin-prettier –save-dev</p>\n<p>○创建.eslintrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:react/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/react&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;prettier&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/prettier&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, &#123;&#125;, &#123; <span class=\"string\">&quot;usePrettierrc&quot;</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○创建.prettierrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;printWidth&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;useTabs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;jsxSingleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;bracketSpacing&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;jsxBracketSameLine&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrowParens&quot;</span>: <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○在编辑器中安装并配置eslint和prettier插件，例如 VS Code中可以安装ESLint和Prettier插件，并在setting.json文件中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint-x2F-prettier插件有区别，最下面👇再来解释一下为什么\"><a href=\"#●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint-x2F-prettier插件有区别，最下面👇再来解释一下为什么\" class=\"headerlink\" title=\"●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint&#x2F;prettier插件有区别，最下面👇再来解释一下为什么\"></a>●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint&#x2F;prettier插件有区别，最下面👇再来解释一下为什么</h6><p>○安装eslint&#x2F;prettier相关插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install eslint prettier eslint-plugin-vue eslint-config-prettier eslint-plugin-prettier --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>○创建.eslintrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:vue/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/vue&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;prettier&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/prettier&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, &#123;&#125;, &#123; <span class=\"string\">&quot;usePrettierrc&quot;</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○创建.prettierrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;printWidth&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;useTabs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;bracketSpacing&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○在编辑中安装eslint和prettier插件，例如VS Code中可以安装ESLint和Prettier插件，并在setting.json中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>(vue和react存在模版语法、组件命名、状态管理等方面的差异，隐藏需要根据具体框架使用合适的插件和扩展，以确保代码可读性和可维护性，提高代码质量和开发效率<br>（1）模版语法： 在vue中，模版语法是一种重要的语法结构，需要进行检查和规范，可以使用eslint-plugin-vue来检查模版语法问题；而在react中，通常使用jsx语法来定义组件，可以使用eslint-plugin-react来检查jsx相关代码<br>（2）组件命名：在vue中，组件命名采用kebab-case(短横线命名法），例如my-component。而在react中，采用PascalCase（大驼峰），例如MyComponent。需要根据具体的框架选择合适的命名规范<br>（3）状态管理，在vue中使用vuex，react中使用redux\\mobx等状态管理库<br>（4）插件和扩展：vue和react需要使用不同的扩展工具，例如：eslint-plugin-react和eslint-plugin-vue</p>\n<h4 id=\"怎么自定义规范（实践）\"><a href=\"#怎么自定义规范（实践）\" class=\"headerlink\" title=\"怎么自定义规范（实践）\"></a>怎么自定义规范（实践）</h4><p>(1)使用官方生成自定义eslint规范的脚手架工具</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装环境</span></span><br><span class=\"line\">npm i -g yo</span><br><span class=\"line\">npm i -g generator-eslint</span><br><span class=\"line\"><span class=\"comment\">// cd 要放置项目的文件夹，创建项目</span></span><br><span class=\"line\">yo <span class=\"attr\">eslint</span>:plugin</span><br><span class=\"line\"><span class=\"comment\">//下面是创建之后需要输入的信息</span></span><br><span class=\"line\"><span class=\"comment\">//yo eslint:rule</span></span><br><span class=\"line\"><span class=\"comment\">//What is your name? 随便写个你的名字</span></span><br><span class=\"line\"><span class=\"comment\">//What is the plugin ID? 你的插件的id，推荐(eslint-plugin-xxx)的命名方式</span></span><br><span class=\"line\"><span class=\"comment\">//Type a short description of this plugin: 描述你的插件是干啥的</span></span><br><span class=\"line\"><span class=\"comment\">//Does this plugin contain custom ESLint rules? Yes</span></span><br><span class=\"line\"><span class=\"comment\">//Does this plugin contain one or more processors? Yes</span></span><br></pre></td></tr></table></figure>\n\n<p>生成下面目录</p>\n<p>(2)在lib&#x2F;rules&#x2F;my-custom-rules1.js中写自定义的规则，下面是基本模版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// meta里面的元数据，对于我们自定义规则，其实只关心schema就行了</span></span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规则的类型problem|suggestion|layout</span></span><br><span class=\"line\">        <span class=\"comment\">// problem: 这条规则识别的代码可能会导致错误或让人迷惑。应该优先解决这个问题</span></span><br><span class=\"line\">        <span class=\"comment\">// suggestion: 这条规则识别的代码不会导致错误，但是建议用更好的方式</span></span><br><span class=\"line\">        <span class=\"comment\">// layout: 表示这条规则主要关心像空格、分号等这种问题</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;suggestion&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 对于自定义规则，docs字段是非必须的</span></span><br><span class=\"line\">        <span class=\"attr\">docs</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">description</span>: <span class=\"string\">&quot;描述你的规则是干啥的&quot;</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 规则的分类，假如你把这条规则提交到eslint核心规则里，那eslint官网规则的首页会按照这个字段进行分类展示</span></span><br><span class=\"line\">            <span class=\"attr\">category</span>: <span class=\"string\">&quot;Possible Errors&quot;</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 假如你把规则提交到eslint核心规则里</span></span><br><span class=\"line\">            <span class=\"comment\">// 且像这样extends: [&#x27;eslint:recommended&#x27;]继承规则的时候，这个属性是true，就会启用这条规则</span></span><br><span class=\"line\">            <span class=\"attr\">recommended</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 你的规则使用文档的url</span></span><br><span class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://eslint.org/docs/rules/no-extra-semi&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 标识这条规则是否可以修复，假如没有这属性，即使你在下面那个create方法里实现了fix功能，eslint也不会帮你修复</span></span><br><span class=\"line\">        <span class=\"attr\">fixable</span>: <span class=\"string\">&quot;code&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 这里定义了这条规则需要的参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如我们是这样使用带参数的rule的时候，rules: &#123; myRule: [&#x27;error&#x27;, param1, param2....]&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// error后面的就是参数，而参数就是在这里定义的</span></span><br><span class=\"line\">        <span class=\"attr\">schema</span>: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">create</span>: <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这是最重要的方法，我们对代码的校验就是在这里做的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// callback functions</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接下来介绍creact方法<br> eslint校验代码其实是解析文件内容，通过AST(抽象语法树）生成一个对象，再检查这个对象是否符合我们的要求，如果不符合要求就报出错误<br>下面举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum myEnumText &#123;</span><br><span class=\"line\">firstName = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;下面是它的AST形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sourceType</span>: <span class=\"variable language_\">module</span></span><br><span class=\"line\"><span class=\"attr\">body</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">EnumDeclaration</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"title class_\">Identifier</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;myEnumText&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">EnumBooleanBody</span></span><br><span class=\"line\">      <span class=\"attr\">members</span>: [</span><br><span class=\"line\">        <span class=\"title class_\">EnumBooleanMember</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"title class_\">Identifier</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;firstName&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"attr\">init</span>: <span class=\"title class_\">NumericLiteral</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>从上面代码可以看出，enum类型的声明变量名是EnumDeclaration，并且通过node.id.name可以获取到声明的变量名，我们通过正则可以校验这个变量名是否以E开头，如果不以E开头就报错或者警告<br><img src=\"/../images/1.png\"><br>（3）接下来是怎么在项目中使用（这里我的插件名称是eslint-plugin-st-rules<br>●将上面的项目发布成npm插件，npm login &#x2F; npm publish</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login --registry=<span class=\"string\">&quot;具体发包地址&quot;</span></span><br><span class=\"line\">npm publish --registry=<span class=\"string\">&quot;具体发包地址&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>●在项目中npm install  eslint-plugin-rules</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  eslint-plugin-rules --<span class=\"string\">&quot;具体发包地址&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>●在.eslintrc.js中  (在这里可以省略eslint-plugin-)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [<span class=\"string\">&#x27;st-rules&#x27;</span>],</span><br><span class=\"line\"> <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/type-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// type类型要用T开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/interface-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// interface类型要用I开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/enum-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// enum类型要用E开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/variable-name-camelcase&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// let var定义的变量需要用小驼峰</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>⚠️更改了.eslintrc.js文件，需要关掉项目重新打开才会生效</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h4 id=\"eslint-x2F-prettier如何做到规范代码的\"><a href=\"#eslint-x2F-prettier如何做到规范代码的\" class=\"headerlink\" title=\"eslint &#x2F; prettier如何做到规范代码的\"></a>eslint &#x2F; prettier如何做到规范代码的</h4><p>ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。下面是它们如何规范代码的简要介绍：</p>\n<h6 id=\"●ESLint\"><a href=\"#●ESLint\" class=\"headerlink\" title=\"●ESLint\"></a>●ESLint</h6><p>○语法检查:  ESLint 可以检查代码中是否存在语法错误，例如未定义的变量、语法错误的表达式等<br>○代码风格检查:  ESLint 可以检查代码的风格是否符合规范，例如缩进、变量命名、空格等<br>○安全性检查:  ESLint 可以检查代码中是否存在安全漏洞，例如 XSS 攻击、SQL 注入等<br>○自定义规则:  ESLint 提供了丰富的规则配置，开发人员可以根据自己的需要自定义规则并进行代码检查</p>\n<h6 id=\"●Prettier\"><a href=\"#●Prettier\" class=\"headerlink\" title=\"●Prettier\"></a>●Prettier</h6><p>○代码格式化: 可以自动格式化代码，使代码符合规范，并保持一致的风格<br>○代码布局: 可以自动调整代码的布局，使代码易于阅读和理解<br>○多语言支持: 支持多种编程语言，例如 JavaScript、TypeScript、CSS、Markdown 等</p>\n<h4 id=\"eslint-x2F-prettier之间的关系\"><a href=\"#eslint-x2F-prettier之间的关系\" class=\"headerlink\" title=\"eslint &#x2F; prettier之间的关系\"></a>eslint &#x2F; prettier之间的关系</h4><p>  ESLint 和 Prettier 都是前端开发中常用的代码规范工具，它们可以帮助开发人员规范代码、提高代码质量，并减少代码错误。虽然它们都可以用于规范代码，但它们之间有不同的关注点和使用方式。<br>ESLint 主要用于检查代码风格和语法错误，可以通过配置文件来定制自己的代码风格规范，并提供了丰富的插件和扩展，可以支持各种语言和框架。ESLint 的作用是在编码过程中及时发现和解决代码问题，从而提高代码质量和可维护性。<br>Prettier 主要用于代码格式化，可以对代码进行自动格式化，使代码符合统一的规范和风格。开发人员可以通过配置文件来定制自己的代码格式化规范，并支持多种语言和框架。Prettier 的作用是将已经编写好的代码快速地格式化成一个统一的格式，从而使代码更加易读、易维护、易扩展。<br>ESLint 和 Prettier 可以结合使用，通过使用 eslint-plugin-prettier 插件和 eslint-config-prettier 配置来将 Prettier 集成到 ESLint 中。这样可以使用 ESLint 来检查代码风格和语法错误，并使用 Prettier 来进行代码格式化。结合使用可以提高代码质量和开发效率，同时也能够使代码更加统一和规范。<br>总之，ESLint 和 Prettier 都是前端开发中常用的代码规范工具，虽然它们之间有不同的关注点和使用方式，但可以结合使用来提高代码质量和开发效率。</p>\n<h4 id=\"eslint-x2F-prettier-在react和vue项目中如何使用\"><a href=\"#eslint-x2F-prettier-在react和vue项目中如何使用\" class=\"headerlink\" title=\"eslint&#x2F;prettier 在react和vue项目中如何使用\"></a>eslint&#x2F;prettier 在react和vue项目中如何使用</h4><h6 id=\"●react项目\"><a href=\"#●react项目\" class=\"headerlink\" title=\"●react项目\"></a>●react项目</h6><p>○安装eslint&#x2F;prettier相关插件<br>npm install eslint prettier eslint-plugin-react eslint-config-prettier eslint-plugin-prettier –save-dev</p>\n<p>○创建.eslintrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:react/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/react&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;prettier&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/prettier&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, &#123;&#125;, &#123; <span class=\"string\">&quot;usePrettierrc&quot;</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○创建.prettierrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;printWidth&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;useTabs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;jsxSingleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;bracketSpacing&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;jsxBracketSameLine&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrowParens&quot;</span>: <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○在编辑器中安装并配置eslint和prettier插件，例如 VS Code中可以安装ESLint和Prettier插件，并在setting.json文件中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint-x2F-prettier插件有区别，最下面👇再来解释一下为什么\"><a href=\"#●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint-x2F-prettier插件有区别，最下面👇再来解释一下为什么\" class=\"headerlink\" title=\"●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint&#x2F;prettier插件有区别，最下面👇再来解释一下为什么\"></a>●vue项目（注：和上面react项目步骤基本一样，唯一的区别就是安装的eslint&#x2F;prettier插件有区别，最下面👇再来解释一下为什么</h6><p>○安装eslint&#x2F;prettier相关插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install eslint prettier eslint-plugin-vue eslint-config-prettier eslint-plugin-prettier --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>○创建.eslintrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:vue/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/vue&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;prettier&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/prettier&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, &#123;&#125;, &#123; <span class=\"string\">&quot;usePrettierrc&quot;</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○创建.prettierrc.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;printWidth&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;useTabs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;bracketSpacing&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>○在编辑中安装eslint和prettier插件，例如VS Code中可以安装ESLint和Prettier插件，并在setting.json中添加以下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>(vue和react存在模版语法、组件命名、状态管理等方面的差异，隐藏需要根据具体框架使用合适的插件和扩展，以确保代码可读性和可维护性，提高代码质量和开发效率<br>（1）模版语法： 在vue中，模版语法是一种重要的语法结构，需要进行检查和规范，可以使用eslint-plugin-vue来检查模版语法问题；而在react中，通常使用jsx语法来定义组件，可以使用eslint-plugin-react来检查jsx相关代码<br>（2）组件命名：在vue中，组件命名采用kebab-case(短横线命名法），例如my-component。而在react中，采用PascalCase（大驼峰），例如MyComponent。需要根据具体的框架选择合适的命名规范<br>（3）状态管理，在vue中使用vuex，react中使用redux\\mobx等状态管理库<br>（4）插件和扩展：vue和react需要使用不同的扩展工具，例如：eslint-plugin-react和eslint-plugin-vue</p>\n<h4 id=\"怎么自定义规范（实践）\"><a href=\"#怎么自定义规范（实践）\" class=\"headerlink\" title=\"怎么自定义规范（实践）\"></a>怎么自定义规范（实践）</h4><p>(1)使用官方生成自定义eslint规范的脚手架工具</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装环境</span></span><br><span class=\"line\">npm i -g yo</span><br><span class=\"line\">npm i -g generator-eslint</span><br><span class=\"line\"><span class=\"comment\">// cd 要放置项目的文件夹，创建项目</span></span><br><span class=\"line\">yo <span class=\"attr\">eslint</span>:plugin</span><br><span class=\"line\"><span class=\"comment\">//下面是创建之后需要输入的信息</span></span><br><span class=\"line\"><span class=\"comment\">//yo eslint:rule</span></span><br><span class=\"line\"><span class=\"comment\">//What is your name? 随便写个你的名字</span></span><br><span class=\"line\"><span class=\"comment\">//What is the plugin ID? 你的插件的id，推荐(eslint-plugin-xxx)的命名方式</span></span><br><span class=\"line\"><span class=\"comment\">//Type a short description of this plugin: 描述你的插件是干啥的</span></span><br><span class=\"line\"><span class=\"comment\">//Does this plugin contain custom ESLint rules? Yes</span></span><br><span class=\"line\"><span class=\"comment\">//Does this plugin contain one or more processors? Yes</span></span><br></pre></td></tr></table></figure>\n\n<p>生成下面目录</p>\n<p>(2)在lib&#x2F;rules&#x2F;my-custom-rules1.js中写自定义的规则，下面是基本模版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// meta里面的元数据，对于我们自定义规则，其实只关心schema就行了</span></span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规则的类型problem|suggestion|layout</span></span><br><span class=\"line\">        <span class=\"comment\">// problem: 这条规则识别的代码可能会导致错误或让人迷惑。应该优先解决这个问题</span></span><br><span class=\"line\">        <span class=\"comment\">// suggestion: 这条规则识别的代码不会导致错误，但是建议用更好的方式</span></span><br><span class=\"line\">        <span class=\"comment\">// layout: 表示这条规则主要关心像空格、分号等这种问题</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;suggestion&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 对于自定义规则，docs字段是非必须的</span></span><br><span class=\"line\">        <span class=\"attr\">docs</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">description</span>: <span class=\"string\">&quot;描述你的规则是干啥的&quot;</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 规则的分类，假如你把这条规则提交到eslint核心规则里，那eslint官网规则的首页会按照这个字段进行分类展示</span></span><br><span class=\"line\">            <span class=\"attr\">category</span>: <span class=\"string\">&quot;Possible Errors&quot;</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 假如你把规则提交到eslint核心规则里</span></span><br><span class=\"line\">            <span class=\"comment\">// 且像这样extends: [&#x27;eslint:recommended&#x27;]继承规则的时候，这个属性是true，就会启用这条规则</span></span><br><span class=\"line\">            <span class=\"attr\">recommended</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 你的规则使用文档的url</span></span><br><span class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://eslint.org/docs/rules/no-extra-semi&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 标识这条规则是否可以修复，假如没有这属性，即使你在下面那个create方法里实现了fix功能，eslint也不会帮你修复</span></span><br><span class=\"line\">        <span class=\"attr\">fixable</span>: <span class=\"string\">&quot;code&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 这里定义了这条规则需要的参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如我们是这样使用带参数的rule的时候，rules: &#123; myRule: [&#x27;error&#x27;, param1, param2....]&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// error后面的就是参数，而参数就是在这里定义的</span></span><br><span class=\"line\">        <span class=\"attr\">schema</span>: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">create</span>: <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这是最重要的方法，我们对代码的校验就是在这里做的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// callback functions</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接下来介绍creact方法<br> eslint校验代码其实是解析文件内容，通过AST(抽象语法树）生成一个对象，再检查这个对象是否符合我们的要求，如果不符合要求就报出错误<br>下面举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum myEnumText &#123;</span><br><span class=\"line\">firstName = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;下面是它的AST形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sourceType</span>: <span class=\"variable language_\">module</span></span><br><span class=\"line\"><span class=\"attr\">body</span>: [</span><br><span class=\"line\">  <span class=\"title class_\">EnumDeclaration</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"title class_\">Identifier</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;myEnumText&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">EnumBooleanBody</span></span><br><span class=\"line\">      <span class=\"attr\">members</span>: [</span><br><span class=\"line\">        <span class=\"title class_\">EnumBooleanMember</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"title class_\">Identifier</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;firstName&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"attr\">init</span>: <span class=\"title class_\">NumericLiteral</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>从上面代码可以看出，enum类型的声明变量名是EnumDeclaration，并且通过node.id.name可以获取到声明的变量名，我们通过正则可以校验这个变量名是否以E开头，如果不以E开头就报错或者警告<br><img src=\"/../images/1.png\"><br>（3）接下来是怎么在项目中使用（这里我的插件名称是eslint-plugin-st-rules<br>●将上面的项目发布成npm插件，npm login &#x2F; npm publish</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login --registry=<span class=\"string\">&quot;具体发包地址&quot;</span></span><br><span class=\"line\">npm publish --registry=<span class=\"string\">&quot;具体发包地址&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>●在项目中npm install  eslint-plugin-rules</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  eslint-plugin-rules --<span class=\"string\">&quot;具体发包地址&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>●在.eslintrc.js中  (在这里可以省略eslint-plugin-)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [<span class=\"string\">&#x27;st-rules&#x27;</span>],</span><br><span class=\"line\"> <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/type-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// type类型要用T开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/interface-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// interface类型要用I开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/enum-prefix&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// enum类型要用E开头</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;st-rules/variable-name-camelcase&#x27;</span>: <span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"comment\">// let var定义的变量需要用小驼峰</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>⚠️更改了.eslintrc.js文件，需要关掉项目重新打开才会生效</p>\n"},{"title":"css-modules解决css样式命名冲突的问题","_content":"## 是什么\n\ncss modules是用于模块化和组合css的系统，通过加入局部作用域、依赖管理来避免全局污染和样式冲突，并且css module在打包的时候会自动将类名转成hash值，完全杜绝css类名冲突问题\n\n### 特性\n\n○作用域：模块中的名称默认属于本地作用域，定义在：loacal中的名称也属于本地作用域，定义在:global中的名称属于全局作用域，全局名称不用被编译成哈希字符串\n○命名：对于本地类名称，css modules建议使用camelCase方式来命名，这样会使得js文件更干净，即styles.className。但你仍然也可使用style['class-name'],不过不推荐\n○下面两点还没有体会。。。\n![](../images/2.png)\n\n```js\nimport styles from './index.moudule.scss'\n<div className={style.chat}></div>\n```\n\n![](../images/3.png)\n","source":"_posts/css-modules.md","raw":"---\ntitle: css-modules解决css样式命名冲突的问题\n---\n## 是什么\n\ncss modules是用于模块化和组合css的系统，通过加入局部作用域、依赖管理来避免全局污染和样式冲突，并且css module在打包的时候会自动将类名转成hash值，完全杜绝css类名冲突问题\n\n### 特性\n\n○作用域：模块中的名称默认属于本地作用域，定义在：loacal中的名称也属于本地作用域，定义在:global中的名称属于全局作用域，全局名称不用被编译成哈希字符串\n○命名：对于本地类名称，css modules建议使用camelCase方式来命名，这样会使得js文件更干净，即styles.className。但你仍然也可使用style['class-name'],不过不推荐\n○下面两点还没有体会。。。\n![](../images/2.png)\n\n```js\nimport styles from './index.moudule.scss'\n<div className={style.chat}></div>\n```\n\n![](../images/3.png)\n","slug":"css-modules","published":1,"date":"2023-07-07T08:54:04.554Z","updated":"2023-07-07T09:27:15.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsdj92l000255libecs15s5","content":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>css modules是用于模块化和组合css的系统，通过加入局部作用域、依赖管理来避免全局污染和样式冲突，并且css module在打包的时候会自动将类名转成hash值，完全杜绝css类名冲突问题</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>○作用域：模块中的名称默认属于本地作用域，定义在：loacal中的名称也属于本地作用域，定义在:global中的名称属于全局作用域，全局名称不用被编译成哈希字符串<br>○命名：对于本地类名称，css modules建议使用camelCase方式来命名，这样会使得js文件更干净，即styles.className。但你仍然也可使用style[‘class-name’],不过不推荐<br>○下面两点还没有体会。。。<br><img src=\"/../images/2.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.moudule.scss&#x27;</span></span><br><span class=\"line\">&lt;div className=&#123;style.<span class=\"property\">chat</span>&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/3.png\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>css modules是用于模块化和组合css的系统，通过加入局部作用域、依赖管理来避免全局污染和样式冲突，并且css module在打包的时候会自动将类名转成hash值，完全杜绝css类名冲突问题</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>○作用域：模块中的名称默认属于本地作用域，定义在：loacal中的名称也属于本地作用域，定义在:global中的名称属于全局作用域，全局名称不用被编译成哈希字符串<br>○命名：对于本地类名称，css modules建议使用camelCase方式来命名，这样会使得js文件更干净，即styles.className。但你仍然也可使用style[‘class-name’],不过不推荐<br>○下面两点还没有体会。。。<br><img src=\"/../images/2.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.moudule.scss&#x27;</span></span><br><span class=\"line\">&lt;div className=&#123;style.<span class=\"property\">chat</span>&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/3.png\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-05-16T10:38:46.506Z","updated":"2023-07-07T08:29:43.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsdj92n000355li3qbua8r3","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"commitlint+husky+lint-staged","_content":"### 为什么要使用\n\n多人开发的时候，commit message五花八门，统一规范有利于及时查找出错的提交代码，从而定位到具体的问题\n如何使用\n\n#### ●husky\n\ngit hooks工具，可以在执行git命令时，执行自定义脚本程序\n\n```js\nnpm i -D husky\nnpx husky install\nnpm set-script prepare \"husky install\"\n```\n\n//执行完上面的操作之后，项目中会多一个.husky文件夹，并且package.json中增加以下命令\n\n```js\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\"\n  }\n}\n// 现在husky已经安装好了，接下来添加对应的钩子函数，比如我需要在每次git commit提交前执行某些操作，就可以添加一个commit-msg钩子\nnpx husky add .husky/commit-msg 'npm test'\n//然后.husky目录下会增加一个commit-msg文件，每一次git commit 都会执行一词npm test(注：这一行只是测试，后面加了npx husky add .husky/commit-msg 'npx --no -- commitlint --edit $1'需要把这一行注释掉，不然提交代码会报错\n//如果遇到特殊情况，要绕过git hooks，可以使用--no-verify\n```\n\n#### ●commitLint\n\n检查git commit 内容是否符合规范,只有符合规范的commit命令才能提交\n\n```js\nnpm i -D @commitlint/{config-conventional,cli}\n\n// 创建一个commitlint.config.js文件\nmodule.exports = { extends: ['@commitlint/config-conventional'] };\n\n// 上面已经引入了husky，所以修改一下commit-msg脚本，在每次git commmit时执行commitlint校验\nnpx husky add .husky/commit-msg 'npx --no -- commitlint --edit $1'\n# or\nyarn husky add .husky/commit-msg 'yarn commitlint --edit $1'\n```\n\n#### ●lint-staged\n\n对暂存区的文件执行脚本，在提交代码的时候，可以通过eslint+prettier等工具格式化代码，但是如果直接处理全部代码，首先就是可能存在性能问题，其次就是可能会修改掉其他同事的代码，这时可以引入lint-staged，它可以过滤出git 暂存区的代码，这样就不要影响到未更改的文件\n\n```js\nnpm i lint-staged -D\n```\n\n//然后在项目根目录创建.lintstagedrc，配置所需的规则\n\n```\n{\n  \"*.{js,jsx,less,md,json}\": [\n    \"prettier --write\"\n  ],\n  \"*.ts?(x)\": [\n    \"prettier --parser=typescript --write\",\n    \"eslint --quiet\"\n  ]\n}\n```\n\n最后通过husky来执行lint-staged\n\n```js\nnpx husky add .husky/pre-commit 'npx lint-staged'\n```\n","source":"_posts/commitlint.md","raw":"---\ntitle: commitlint+husky+lint-staged\n---\n### 为什么要使用\n\n多人开发的时候，commit message五花八门，统一规范有利于及时查找出错的提交代码，从而定位到具体的问题\n如何使用\n\n#### ●husky\n\ngit hooks工具，可以在执行git命令时，执行自定义脚本程序\n\n```js\nnpm i -D husky\nnpx husky install\nnpm set-script prepare \"husky install\"\n```\n\n//执行完上面的操作之后，项目中会多一个.husky文件夹，并且package.json中增加以下命令\n\n```js\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\"\n  }\n}\n// 现在husky已经安装好了，接下来添加对应的钩子函数，比如我需要在每次git commit提交前执行某些操作，就可以添加一个commit-msg钩子\nnpx husky add .husky/commit-msg 'npm test'\n//然后.husky目录下会增加一个commit-msg文件，每一次git commit 都会执行一词npm test(注：这一行只是测试，后面加了npx husky add .husky/commit-msg 'npx --no -- commitlint --edit $1'需要把这一行注释掉，不然提交代码会报错\n//如果遇到特殊情况，要绕过git hooks，可以使用--no-verify\n```\n\n#### ●commitLint\n\n检查git commit 内容是否符合规范,只有符合规范的commit命令才能提交\n\n```js\nnpm i -D @commitlint/{config-conventional,cli}\n\n// 创建一个commitlint.config.js文件\nmodule.exports = { extends: ['@commitlint/config-conventional'] };\n\n// 上面已经引入了husky，所以修改一下commit-msg脚本，在每次git commmit时执行commitlint校验\nnpx husky add .husky/commit-msg 'npx --no -- commitlint --edit $1'\n# or\nyarn husky add .husky/commit-msg 'yarn commitlint --edit $1'\n```\n\n#### ●lint-staged\n\n对暂存区的文件执行脚本，在提交代码的时候，可以通过eslint+prettier等工具格式化代码，但是如果直接处理全部代码，首先就是可能存在性能问题，其次就是可能会修改掉其他同事的代码，这时可以引入lint-staged，它可以过滤出git 暂存区的代码，这样就不要影响到未更改的文件\n\n```js\nnpm i lint-staged -D\n```\n\n//然后在项目根目录创建.lintstagedrc，配置所需的规则\n\n```\n{\n  \"*.{js,jsx,less,md,json}\": [\n    \"prettier --write\"\n  ],\n  \"*.ts?(x)\": [\n    \"prettier --parser=typescript --write\",\n    \"eslint --quiet\"\n  ]\n}\n```\n\n最后通过husky来执行lint-staged\n\n```js\nnpx husky add .husky/pre-commit 'npx lint-staged'\n```\n","slug":"commitlint","published":1,"date":"2023-07-07T09:49:57.464Z","updated":"2023-07-07T09:52:30.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsgj8mz0000kpli0ogv59hp","content":"<h3 id=\"为什么要使用\"><a href=\"#为什么要使用\" class=\"headerlink\" title=\"为什么要使用\"></a>为什么要使用</h3><p>多人开发的时候，commit message五花八门，统一规范有利于及时查找出错的提交代码，从而定位到具体的问题<br>如何使用</p>\n<h4 id=\"●husky\"><a href=\"#●husky\" class=\"headerlink\" title=\"●husky\"></a>●husky</h4><p>git hooks工具，可以在执行git命令时，执行自定义脚本程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D husky</span><br><span class=\"line\">npx husky install</span><br><span class=\"line\">npm set-script prepare <span class=\"string\">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;执行完上面的操作之后，项目中会多一个.husky文件夹，并且package.json中增加以下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prepare&quot;</span>: <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 现在husky已经安装好了，接下来添加对应的钩子函数，比如我需要在每次git commit提交前执行某些操作，就可以添加一个commit-msg钩子</span></span><br><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;npm test&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//然后.husky目录下会增加一个commit-msg文件，每一次git commit 都会执行一词npm test(注：这一行只是测试，后面加了npx husky add .husky/commit-msg &#x27;npx --no -- commitlint --edit $1&#x27;需要把这一行注释掉，不然提交代码会报错</span></span><br><span class=\"line\"><span class=\"comment\">//如果遇到特殊情况，要绕过git hooks，可以使用--no-verify</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●commitLint\"><a href=\"#●commitLint\" class=\"headerlink\" title=\"●commitLint\"></a>●commitLint</h4><p>检查git commit 内容是否符合规范,只有符合规范的commit命令才能提交</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @commitlint/&#123;config-conventional,cli&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个commitlint.config.js文件</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面已经引入了husky，所以修改一下commit-msg脚本，在每次git commmit时执行commitlint校验</span></span><br><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;npx --no -- commitlint --edit $1&#x27;</span></span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;yarn commitlint --edit $1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●lint-staged\"><a href=\"#●lint-staged\" class=\"headerlink\" title=\"●lint-staged\"></a>●lint-staged</h4><p>对暂存区的文件执行脚本，在提交代码的时候，可以通过eslint+prettier等工具格式化代码，但是如果直接处理全部代码，首先就是可能存在性能问题，其次就是可能会修改掉其他同事的代码，这时可以引入lint-staged，它可以过滤出git 暂存区的代码，这样就不要影响到未更改的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lint-staged -D</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;然后在项目根目录创建.lintstagedrc，配置所需的规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;*.&#123;js,jsx,less,md,json&#125;&quot;: [</span><br><span class=\"line\">    &quot;prettier --write&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;*.ts?(x)&quot;: [</span><br><span class=\"line\">    &quot;prettier --parser=typescript --write&quot;,</span><br><span class=\"line\">    &quot;eslint --quiet&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后通过husky来执行lint-staged</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/pre-commit <span class=\"string\">&#x27;npx lint-staged&#x27;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"为什么要使用\"><a href=\"#为什么要使用\" class=\"headerlink\" title=\"为什么要使用\"></a>为什么要使用</h3><p>多人开发的时候，commit message五花八门，统一规范有利于及时查找出错的提交代码，从而定位到具体的问题<br>如何使用</p>\n<h4 id=\"●husky\"><a href=\"#●husky\" class=\"headerlink\" title=\"●husky\"></a>●husky</h4><p>git hooks工具，可以在执行git命令时，执行自定义脚本程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D husky</span><br><span class=\"line\">npx husky install</span><br><span class=\"line\">npm set-script prepare <span class=\"string\">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;执行完上面的操作之后，项目中会多一个.husky文件夹，并且package.json中增加以下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;prepare&quot;</span>: <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 现在husky已经安装好了，接下来添加对应的钩子函数，比如我需要在每次git commit提交前执行某些操作，就可以添加一个commit-msg钩子</span></span><br><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;npm test&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//然后.husky目录下会增加一个commit-msg文件，每一次git commit 都会执行一词npm test(注：这一行只是测试，后面加了npx husky add .husky/commit-msg &#x27;npx --no -- commitlint --edit $1&#x27;需要把这一行注释掉，不然提交代码会报错</span></span><br><span class=\"line\"><span class=\"comment\">//如果遇到特殊情况，要绕过git hooks，可以使用--no-verify</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●commitLint\"><a href=\"#●commitLint\" class=\"headerlink\" title=\"●commitLint\"></a>●commitLint</h4><p>检查git commit 内容是否符合规范,只有符合规范的commit命令才能提交</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @commitlint/&#123;config-conventional,cli&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个commitlint.config.js文件</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面已经引入了husky，所以修改一下commit-msg脚本，在每次git commmit时执行commitlint校验</span></span><br><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;npx --no -- commitlint --edit $1&#x27;</span></span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn husky add .<span class=\"property\">husky</span>/commit-msg <span class=\"string\">&#x27;yarn commitlint --edit $1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●lint-staged\"><a href=\"#●lint-staged\" class=\"headerlink\" title=\"●lint-staged\"></a>●lint-staged</h4><p>对暂存区的文件执行脚本，在提交代码的时候，可以通过eslint+prettier等工具格式化代码，但是如果直接处理全部代码，首先就是可能存在性能问题，其次就是可能会修改掉其他同事的代码，这时可以引入lint-staged，它可以过滤出git 暂存区的代码，这样就不要影响到未更改的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lint-staged -D</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;然后在项目根目录创建.lintstagedrc，配置所需的规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;*.&#123;js,jsx,less,md,json&#125;&quot;: [</span><br><span class=\"line\">    &quot;prettier --write&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;*.ts?(x)&quot;: [</span><br><span class=\"line\">    &quot;prettier --parser=typescript --write&quot;,</span><br><span class=\"line\">    &quot;eslint --quiet&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后通过husky来执行lint-staged</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .<span class=\"property\">husky</span>/pre-commit <span class=\"string\">&#x27;npx lint-staged&#x27;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"webpack","_content":"### 一、主要概念\n\n#### ●5大核心概念\n\n```js\nmodule.exports = {\n  // 入口\n  entry: \"\",\n  // 输出\n  output: {},\n  // 加载器loader\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"\",  // development|production\n};\n```\n\n#### ●生产模式和开发模式\n\n  ○开发模式\n  （1）编译代码，使浏览器能识别运行\n开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源\n  （2）代码质量检查，树立代码规范\n提前检查代码的一些隐患，让代码运行时能更加健壮。提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。\n\n  ○生产模式\n    生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要  对代码进行优化，让其运行性能更好。优化主要从两个角度出发:\n  1）优化代码运行性能（2）优化代码打包速度\n\n#### ●处理样式资源\n\n1）Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源\n\n```js\n// css-loader: 负责将css文件编译成webpack能识别的模块\n// style-loader: 会动态创建一个style标签，里面放置webpack中css模块内容\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"\",\n  output: {},\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2）提取css成单独的文件\n  css文件目前被打包到js文件中，当js文件加载时，会创建一个style标签来生成样式，这对于网站来说，会造成闪屏现象，用户体验不好，我们应该是单独的css文件，通过link标签加载性能才好\n\n ```js\nnpm i mini-css-extract-plugin -D\nconst MiniCssExtractPlugin =require(\"mini-css-extract-plugin\");\n// 将style-loader替换成 MiniCssExtractPlugin.loader\nrules: [\n  {\n    // 用来匹配 .css 结尾的文件\n    test: /\\.css$/,\n    // use 数组里面 Loader 执行顺序是从右到左\n    use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n  }]\n\n3）css兼容性处理\nnpm i postcss-loader postcss postcss-preset-env -D\nrules: [\n  {\n    // 用来匹配 .css 结尾的文件\n    test: /\\.css$/,\n    // use 数组里面 Loader 执行顺序是从右到左\n    use: [\n      MiniCssExtractPlugin.loader,\n      \"css-loader\",\n      {\n        loader: \"postcss-loader\",\n        options: {\n          postcssOptions: {\n            plugins: [\n              \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n            ],\n          },\n        },\n      },\n    ],\n\n  在package.json中可以更改兼容性\n{\n  // 其他省略\n  \"browserslist\": [\"ie >= 8\"]\n}\n```\n\n4）压缩css\n\n```js\nnpm i css-minimizer-webpack-plugin -D\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\nplugins: [\n      // css压缩\n    new CssMinimizerPlugin(),\n  ],\n```\n\n5)合并配置处理\n\n```js\nconst getStyleLoaders = (preProcessor) => {\n  return [\n    MiniCssExtractPlugin.loader,\n    \"css-loader\",\n    {\n      loader: \"postcss-loader\",\n      options: {\n        postcssOptions: {\n          plugins: [\n            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n          ],\n        },\n      },\n    },\n    preProcessor,\n  ].filter(Boolean);\n};\n// 下面是用法\nrules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: getStyleLoaders(),\n      },\n      {\n        test: /\\.less$/,\n        use: getStyleLoaders(\"less-loader\"),\n      },\n]\n```\n\n#### ●处理图片资源\n\n```js\n// webpack4中，处理图片要通过file-loader和url-loader进行处理，但是webpack5已经将两个loader功能内置到webpack里了，我们只需要简单配置即可处理图片资源\nrules: [\n{\n    test: /\\.(png|jpe?g|gif|webp)$/,\n    type: \"asset\",\n}],\n\n// 优化\n{\n    test: /\\.(png|jpe?g|gif|webp)$/,\n    type: \"asset\",\n    //将小于某个大小的图片转化成 data URI 形式（Base64 格式， 优点是能减    少请求次数，缺点是会导致体积变大\n    parser: {\n      dataUrlCondition: {\n        maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n      },\n    },\n// 修改资源输入路径\ngenerator: {\n  // 将图片文件输出到 static/imgs 目录中\n  // 将图片文件命名 [hash:8][ext][query]\n  // [hash:8]: hash值取8位\n  // [ext]: 使用之前的文件扩展名\n  // [query]: 添加之前的query参数\n  filename: \"static/imgs/[hash:8][ext][query]\",\n}},\n```\n\n#### ●处理js资源\n\n```js\n1)针对 js 兼容性处理，我们使用 Babel 来完成\n// 此处eslint具体配置省略，只写webpack配置\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\n plugins: [\n    new ESLintWebpackPlugin({\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"src\"),\n    }),\n  ],\n```\n\n2）针对代码格式，我们使用 Eslint 来完成\n\n```js\nnpm i babel-loader @babel/core @babel/preset-env -D\n// babel.config.js\nmodule.exports = {\n  presets: [\"@babel/preset-env\"],\n};\n```\n\n#### ●处理html资源\n\n```js\nnpm i html-webpack-plugin -D\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n plugins: [\n    new HtmlWebpackPlugin({\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n      template: path.resolve(__dirname, \"public/index.html\"),\n    }),\n  ],\n```\n\n### 二、优化\n\n#### ●提升开发体验\n\n（1）sourceMap方便出现问题时定位到具体代码\n\n```js\nmodule.exports = {\n  // 其他省略\n  mode: \"production\",\n  devtool: \"source-map\",\n};\n \nmodule.exports = {\n  // 其他省略\n  mode: \"development\",\n  devtool: \"cheap-module-source-map\",\n};\n```\n\n#### ●提升打包构建速度\n\n（1）oneOf\n\n```js\nmodule: {\n    rules: [\n      {\n    oneOf: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        include: XXXX,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      }]\n```\n\n（2） include exclude\n（3）hotMdouleReplacement（HMR）\n（4）cache\n\n```js\n// 每次js打包都要经过eslint和babel编译，速度比较慢，可以缓存之前的eslint检查和babel编译结果，这样二次打包速度会快很多\nplugins: [\n    new ESLintWebpackPlugin({\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"../src\"),\n      exclude: \"node_modules\", // 默认值\n      cache: true, // 开启缓存\n      // 缓存目录\n      cacheLocation: path.resolve(\n        __dirname,\n        \"../node_modules/.cache/.eslintcache\"\n      ),\n    })]\n```\n\n（5）Thead多核，多进程\n\n#### ●减少代码体积\n\n（1）tree shaking\n（2）Image Minimizer\n当项目中引入图片过多时（针对本地文件）可以进行压缩\n\n```js\nnpm i image-minimizer-webpack-plugin imagemin -D\n// 无损压缩\nnpm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D\n// 有损压缩\nnpm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D\n\nconst ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\noptimization: {\n    minimizer: [\n      // css压缩也可以写到optimization.minimizer里面，效果一样的\n      new CssMinimizerPlugin(),\n      // 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了\n      new TerserPlugin({\n        parallel: threads, // 开启多进程\n      }),\n      // 压缩图片\n      new ImageMinimizerPlugin({\n        minimizer: {\n          implementation: ImageMinimizerPlugin.imageminGenerate,\n          options: {\n            plugins: [\n              [\"gifsicle\", { interlaced: true }],\n              [\"jpegtran\", { progressive: true }],\n              [\"optipng\", { optimizationLevel: 5 }],\n              [\n                \"svgo\",\n                {\n                  plugins: [\n                    \"preset-default\",\n                    \"prefixIds\",\n                    {\n                      name: \"sortAttrs\",\n                      params: {\n                        xmlnsOrder: \"alphabetical\",\n                      },\n                    },\n                  ],\n                },\n              ],\n            ],\n          },\n        },\n      }),\n    ],\n  },\n```\n\n#### ●优化代码运行性能\n\n（1）code split\n●分割文件：将打包生成的文件进行分割，生产多个js文件\n●按需加载，需要哪个文件就加载哪个\n\n```js\noptimization: {\n    // 代码分割配置\n    splitChunks: {\n      chunks: \"all\", // 对所有模块都进行分割\n      }\n}\n```\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack\n---\n### 一、主要概念\n\n#### ●5大核心概念\n\n```js\nmodule.exports = {\n  // 入口\n  entry: \"\",\n  // 输出\n  output: {},\n  // 加载器loader\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"\",  // development|production\n};\n```\n\n#### ●生产模式和开发模式\n\n  ○开发模式\n  （1）编译代码，使浏览器能识别运行\n开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源\n  （2）代码质量检查，树立代码规范\n提前检查代码的一些隐患，让代码运行时能更加健壮。提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。\n\n  ○生产模式\n    生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要  对代码进行优化，让其运行性能更好。优化主要从两个角度出发:\n  1）优化代码运行性能（2）优化代码打包速度\n\n#### ●处理样式资源\n\n1）Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源\n\n```js\n// css-loader: 负责将css文件编译成webpack能识别的模块\n// style-loader: 会动态创建一个style标签，里面放置webpack中css模块内容\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"\",\n  output: {},\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2）提取css成单独的文件\n  css文件目前被打包到js文件中，当js文件加载时，会创建一个style标签来生成样式，这对于网站来说，会造成闪屏现象，用户体验不好，我们应该是单独的css文件，通过link标签加载性能才好\n\n ```js\nnpm i mini-css-extract-plugin -D\nconst MiniCssExtractPlugin =require(\"mini-css-extract-plugin\");\n// 将style-loader替换成 MiniCssExtractPlugin.loader\nrules: [\n  {\n    // 用来匹配 .css 结尾的文件\n    test: /\\.css$/,\n    // use 数组里面 Loader 执行顺序是从右到左\n    use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n  }]\n\n3）css兼容性处理\nnpm i postcss-loader postcss postcss-preset-env -D\nrules: [\n  {\n    // 用来匹配 .css 结尾的文件\n    test: /\\.css$/,\n    // use 数组里面 Loader 执行顺序是从右到左\n    use: [\n      MiniCssExtractPlugin.loader,\n      \"css-loader\",\n      {\n        loader: \"postcss-loader\",\n        options: {\n          postcssOptions: {\n            plugins: [\n              \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n            ],\n          },\n        },\n      },\n    ],\n\n  在package.json中可以更改兼容性\n{\n  // 其他省略\n  \"browserslist\": [\"ie >= 8\"]\n}\n```\n\n4）压缩css\n\n```js\nnpm i css-minimizer-webpack-plugin -D\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\nplugins: [\n      // css压缩\n    new CssMinimizerPlugin(),\n  ],\n```\n\n5)合并配置处理\n\n```js\nconst getStyleLoaders = (preProcessor) => {\n  return [\n    MiniCssExtractPlugin.loader,\n    \"css-loader\",\n    {\n      loader: \"postcss-loader\",\n      options: {\n        postcssOptions: {\n          plugins: [\n            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n          ],\n        },\n      },\n    },\n    preProcessor,\n  ].filter(Boolean);\n};\n// 下面是用法\nrules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: getStyleLoaders(),\n      },\n      {\n        test: /\\.less$/,\n        use: getStyleLoaders(\"less-loader\"),\n      },\n]\n```\n\n#### ●处理图片资源\n\n```js\n// webpack4中，处理图片要通过file-loader和url-loader进行处理，但是webpack5已经将两个loader功能内置到webpack里了，我们只需要简单配置即可处理图片资源\nrules: [\n{\n    test: /\\.(png|jpe?g|gif|webp)$/,\n    type: \"asset\",\n}],\n\n// 优化\n{\n    test: /\\.(png|jpe?g|gif|webp)$/,\n    type: \"asset\",\n    //将小于某个大小的图片转化成 data URI 形式（Base64 格式， 优点是能减    少请求次数，缺点是会导致体积变大\n    parser: {\n      dataUrlCondition: {\n        maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n      },\n    },\n// 修改资源输入路径\ngenerator: {\n  // 将图片文件输出到 static/imgs 目录中\n  // 将图片文件命名 [hash:8][ext][query]\n  // [hash:8]: hash值取8位\n  // [ext]: 使用之前的文件扩展名\n  // [query]: 添加之前的query参数\n  filename: \"static/imgs/[hash:8][ext][query]\",\n}},\n```\n\n#### ●处理js资源\n\n```js\n1)针对 js 兼容性处理，我们使用 Babel 来完成\n// 此处eslint具体配置省略，只写webpack配置\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\n plugins: [\n    new ESLintWebpackPlugin({\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"src\"),\n    }),\n  ],\n```\n\n2）针对代码格式，我们使用 Eslint 来完成\n\n```js\nnpm i babel-loader @babel/core @babel/preset-env -D\n// babel.config.js\nmodule.exports = {\n  presets: [\"@babel/preset-env\"],\n};\n```\n\n#### ●处理html资源\n\n```js\nnpm i html-webpack-plugin -D\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n plugins: [\n    new HtmlWebpackPlugin({\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n      template: path.resolve(__dirname, \"public/index.html\"),\n    }),\n  ],\n```\n\n### 二、优化\n\n#### ●提升开发体验\n\n（1）sourceMap方便出现问题时定位到具体代码\n\n```js\nmodule.exports = {\n  // 其他省略\n  mode: \"production\",\n  devtool: \"source-map\",\n};\n \nmodule.exports = {\n  // 其他省略\n  mode: \"development\",\n  devtool: \"cheap-module-source-map\",\n};\n```\n\n#### ●提升打包构建速度\n\n（1）oneOf\n\n```js\nmodule: {\n    rules: [\n      {\n    oneOf: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        include: XXXX,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      }]\n```\n\n（2） include exclude\n（3）hotMdouleReplacement（HMR）\n（4）cache\n\n```js\n// 每次js打包都要经过eslint和babel编译，速度比较慢，可以缓存之前的eslint检查和babel编译结果，这样二次打包速度会快很多\nplugins: [\n    new ESLintWebpackPlugin({\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"../src\"),\n      exclude: \"node_modules\", // 默认值\n      cache: true, // 开启缓存\n      // 缓存目录\n      cacheLocation: path.resolve(\n        __dirname,\n        \"../node_modules/.cache/.eslintcache\"\n      ),\n    })]\n```\n\n（5）Thead多核，多进程\n\n#### ●减少代码体积\n\n（1）tree shaking\n（2）Image Minimizer\n当项目中引入图片过多时（针对本地文件）可以进行压缩\n\n```js\nnpm i image-minimizer-webpack-plugin imagemin -D\n// 无损压缩\nnpm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D\n// 有损压缩\nnpm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D\n\nconst ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\noptimization: {\n    minimizer: [\n      // css压缩也可以写到optimization.minimizer里面，效果一样的\n      new CssMinimizerPlugin(),\n      // 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了\n      new TerserPlugin({\n        parallel: threads, // 开启多进程\n      }),\n      // 压缩图片\n      new ImageMinimizerPlugin({\n        minimizer: {\n          implementation: ImageMinimizerPlugin.imageminGenerate,\n          options: {\n            plugins: [\n              [\"gifsicle\", { interlaced: true }],\n              [\"jpegtran\", { progressive: true }],\n              [\"optipng\", { optimizationLevel: 5 }],\n              [\n                \"svgo\",\n                {\n                  plugins: [\n                    \"preset-default\",\n                    \"prefixIds\",\n                    {\n                      name: \"sortAttrs\",\n                      params: {\n                        xmlnsOrder: \"alphabetical\",\n                      },\n                    },\n                  ],\n                },\n              ],\n            ],\n          },\n        },\n      }),\n    ],\n  },\n```\n\n#### ●优化代码运行性能\n\n（1）code split\n●分割文件：将打包生成的文件进行分割，生产多个js文件\n●按需加载，需要哪个文件就加载哪个\n\n```js\noptimization: {\n    // 代码分割配置\n    splitChunks: {\n      chunks: \"all\", // 对所有模块都进行分割\n      }\n}\n```\n","slug":"webpack","published":1,"date":"2023-07-07T09:42:57.208Z","updated":"2023-07-07T09:47:26.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsgj8n40001kpli66mfgphi","content":"<h3 id=\"一、主要概念\"><a href=\"#一、主要概念\" class=\"headerlink\" title=\"一、主要概念\"></a>一、主要概念</h3><h4 id=\"●5大核心概念\"><a href=\"#●5大核心概念\" class=\"headerlink\" title=\"●5大核心概念\"></a>●5大核心概念</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器loader</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;&quot;</span>,  <span class=\"comment\">// development|production</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●生产模式和开发模式\"><a href=\"#●生产模式和开发模式\" class=\"headerlink\" title=\"●生产模式和开发模式\"></a>●生产模式和开发模式</h4><p>  ○开发模式<br>  （1）编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源<br>  （2）代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</p>\n<p>  ○生产模式<br>    生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要  对代码进行优化，让其运行性能更好。优化主要从两个角度出发:<br>  1）优化代码运行性能（2）优化代码打包速度</p>\n<h4 id=\"●处理样式资源\"><a href=\"#●处理样式资源\" class=\"headerlink\" title=\"●处理样式资源\"></a>●处理样式资源</h4><p>1）Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// css-loader: 负责将css文件编译成webpack能识别的模块</span></span><br><span class=\"line\"><span class=\"comment\">// style-loader: 会动态创建一个style标签，里面放置webpack中css模块内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2）提取css成单独的文件<br>  css文件目前被打包到js文件中，当js文件加载时，会创建一个style标签来生成样式，这对于网站来说，会造成闪屏现象，用户体验不好，我们应该是单独的css文件，通过link标签加载性能才好</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mini-css-extract-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> =<span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 将style-loader替换成 MiniCssExtractPlugin.loader</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>）css兼容性处理</span><br><span class=\"line\">npm i postcss-loader postcss postcss-preset-env -D</span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">      <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">              <span class=\"string\">&quot;postcss-preset-env&quot;</span>, <span class=\"comment\">// 能解决大多数样式兼容性问题</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">  在package.<span class=\"property\">json</span>中可以更改兼容性</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"string\">&quot;browserslist&quot;</span>: [<span class=\"string\">&quot;ie &gt;= 8&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）压缩css</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i css-minimizer-webpack-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// css压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<p>5)合并配置处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getStyleLoaders</span> = (<span class=\"params\">preProcessor</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;postcss-preset-env&quot;</span>, <span class=\"comment\">// 能解决大多数样式兼容性问题</span></span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    preProcessor,</span><br><span class=\"line\">  ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下面是用法</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"title function_\">getStyleLoaders</span>(),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"title function_\">getStyleLoaders</span>(<span class=\"string\">&quot;less-loader&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理图片资源\"><a href=\"#●处理图片资源\" class=\"headerlink\" title=\"●处理图片资源\"></a>●处理图片资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack4中，处理图片要通过file-loader和url-loader进行处理，但是webpack5已经将两个loader功能内置到webpack里了，我们只需要简单配置即可处理图片资源</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//将小于某个大小的图片转化成 data URI 形式（Base64 格式， 优点是能减    少请求次数，缺点是会导致体积变大</span></span><br><span class=\"line\">    <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 修改资源输入路径</span></span><br><span class=\"line\"><span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">  <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">  <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">  <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">  <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">&#125;&#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理js资源\"><a href=\"#●处理js资源\" class=\"headerlink\" title=\"●处理js资源\"></a>●处理js资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>)针对 js 兼容性处理，我们使用 <span class=\"title class_\">Babel</span> 来完成</span><br><span class=\"line\"><span class=\"comment\">// 此处eslint具体配置省略，只写webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ESLintWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class=\"line\"> <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检查文件的根目录</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<p>2）针对代码格式，我们使用 Eslint 来完成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env -D</span><br><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理html资源\"><a href=\"#●处理html资源\" class=\"headerlink\" title=\"●处理html资源\"></a>●处理html资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i html-webpack-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"> <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 以 public/index.html 为模板创建文件</span></span><br><span class=\"line\">      <span class=\"comment\">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;public/index.html&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、优化\"><a href=\"#二、优化\" class=\"headerlink\" title=\"二、优化\"></a>二、优化</h3><h4 id=\"●提升开发体验\"><a href=\"#●提升开发体验\" class=\"headerlink\" title=\"●提升开发体验\"></a>●提升开发体验</h4><p>（1）sourceMap方便出现问题时定位到具体代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;cheap-module-source-map&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●提升打包构建速度\"><a href=\"#●提升打包构建速度\" class=\"headerlink\" title=\"●提升打包构建速度\"></a>●提升打包构建速度</h4><p>（1）oneOf</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">    <span class=\"attr\">oneOf</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">include</span>: <span class=\"variable constant_\">XXXX</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>（2） include exclude<br>（3）hotMdouleReplacement（HMR）<br>（4）cache</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次js打包都要经过eslint和babel编译，速度比较慢，可以缓存之前的eslint检查和babel编译结果，这样二次打包速度会快很多</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检查文件的根目录</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../src&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">      <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">      <span class=\"comment\">// 缓存目录</span></span><br><span class=\"line\">      <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">        __dirname,</span><br><span class=\"line\">        <span class=\"string\">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;)]</span><br></pre></td></tr></table></figure>\n\n<p>（5）Thead多核，多进程</p>\n<h4 id=\"●减少代码体积\"><a href=\"#●减少代码体积\" class=\"headerlink\" title=\"●减少代码体积\"></a>●减少代码体积</h4><p>（1）tree shaking<br>（2）Image Minimizer<br>当项目中引入图片过多时（针对本地文件）可以进行压缩</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i image-minimizer-webpack-plugin imagemin -D</span><br><span class=\"line\"><span class=\"comment\">// 无损压缩</span></span><br><span class=\"line\">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br><span class=\"line\"><span class=\"comment\">// 有损压缩</span></span><br><span class=\"line\">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ImageMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">      <span class=\"comment\">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: threads, <span class=\"comment\">// 开启多进程</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">// 压缩图片</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ImageMinimizerPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">implementation</span>: <span class=\"title class_\">ImageMinimizerPlugin</span>.<span class=\"property\">imageminGenerate</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">              [<span class=\"string\">&quot;gifsicle&quot;</span>, &#123; <span class=\"attr\">interlaced</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">              [<span class=\"string\">&quot;jpegtran&quot;</span>, &#123; <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">              [<span class=\"string\">&quot;optipng&quot;</span>, &#123; <span class=\"attr\">optimizationLevel</span>: <span class=\"number\">5</span> &#125;],</span><br><span class=\"line\">              [</span><br><span class=\"line\">                <span class=\"string\">&quot;svgo&quot;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    <span class=\"string\">&quot;preset-default&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;prefixIds&quot;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      <span class=\"attr\">name</span>: <span class=\"string\">&quot;sortAttrs&quot;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">xmlnsOrder</span>: <span class=\"string\">&quot;alphabetical&quot;</span>,</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●优化代码运行性能\"><a href=\"#●优化代码运行性能\" class=\"headerlink\" title=\"●优化代码运行性能\"></a>●优化代码运行性能</h4><p>（1）code split<br>●分割文件：将打包生成的文件进行分割，生产多个js文件<br>●按需加载，需要哪个文件就加载哪个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代码分割配置</span></span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"comment\">// 对所有模块都进行分割</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"一、主要概念\"><a href=\"#一、主要概念\" class=\"headerlink\" title=\"一、主要概念\"></a>一、主要概念</h3><h4 id=\"●5大核心概念\"><a href=\"#●5大核心概念\" class=\"headerlink\" title=\"●5大核心概念\"></a>●5大核心概念</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器loader</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;&quot;</span>,  <span class=\"comment\">// development|production</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●生产模式和开发模式\"><a href=\"#●生产模式和开发模式\" class=\"headerlink\" title=\"●生产模式和开发模式\"></a>●生产模式和开发模式</h4><p>  ○开发模式<br>  （1）编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源<br>  （2）代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</p>\n<p>  ○生产模式<br>    生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要  对代码进行优化，让其运行性能更好。优化主要从两个角度出发:<br>  1）优化代码运行性能（2）优化代码打包速度</p>\n<h4 id=\"●处理样式资源\"><a href=\"#●处理样式资源\" class=\"headerlink\" title=\"●处理样式资源\"></a>●处理样式资源</h4><p>1）Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// css-loader: 负责将css文件编译成webpack能识别的模块</span></span><br><span class=\"line\"><span class=\"comment\">// style-loader: 会动态创建一个style标签，里面放置webpack中css模块内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2）提取css成单独的文件<br>  css文件目前被打包到js文件中，当js文件加载时，会创建一个style标签来生成样式，这对于网站来说，会造成闪屏现象，用户体验不好，我们应该是单独的css文件，通过link标签加载性能才好</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mini-css-extract-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> =<span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 将style-loader替换成 MiniCssExtractPlugin.loader</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>）css兼容性处理</span><br><span class=\"line\">npm i postcss-loader postcss postcss-preset-env -D</span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">      <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">              <span class=\"string\">&quot;postcss-preset-env&quot;</span>, <span class=\"comment\">// 能解决大多数样式兼容性问题</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">  在package.<span class=\"property\">json</span>中可以更改兼容性</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"string\">&quot;browserslist&quot;</span>: [<span class=\"string\">&quot;ie &gt;= 8&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）压缩css</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i css-minimizer-webpack-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// css压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<p>5)合并配置处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getStyleLoaders</span> = (<span class=\"params\">preProcessor</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;postcss-preset-env&quot;</span>, <span class=\"comment\">// 能解决大多数样式兼容性问题</span></span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    preProcessor,</span><br><span class=\"line\">  ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下面是用法</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"title function_\">getStyleLoaders</span>(),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"title function_\">getStyleLoaders</span>(<span class=\"string\">&quot;less-loader&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理图片资源\"><a href=\"#●处理图片资源\" class=\"headerlink\" title=\"●处理图片资源\"></a>●处理图片资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack4中，处理图片要通过file-loader和url-loader进行处理，但是webpack5已经将两个loader功能内置到webpack里了，我们只需要简单配置即可处理图片资源</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//将小于某个大小的图片转化成 data URI 形式（Base64 格式， 优点是能减    少请求次数，缺点是会导致体积变大</span></span><br><span class=\"line\">    <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 修改资源输入路径</span></span><br><span class=\"line\"><span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">  <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">  <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">  <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">  <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">&#125;&#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理js资源\"><a href=\"#●处理js资源\" class=\"headerlink\" title=\"●处理js资源\"></a>●处理js资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>)针对 js 兼容性处理，我们使用 <span class=\"title class_\">Babel</span> 来完成</span><br><span class=\"line\"><span class=\"comment\">// 此处eslint具体配置省略，只写webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ESLintWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class=\"line\"> <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检查文件的根目录</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<p>2）针对代码格式，我们使用 Eslint 来完成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env -D</span><br><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●处理html资源\"><a href=\"#●处理html资源\" class=\"headerlink\" title=\"●处理html资源\"></a>●处理html资源</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i html-webpack-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"> <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 以 public/index.html 为模板创建文件</span></span><br><span class=\"line\">      <span class=\"comment\">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;public/index.html&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、优化\"><a href=\"#二、优化\" class=\"headerlink\" title=\"二、优化\"></a>二、优化</h3><h4 id=\"●提升开发体验\"><a href=\"#●提升开发体验\" class=\"headerlink\" title=\"●提升开发体验\"></a>●提升开发体验</h4><p>（1）sourceMap方便出现问题时定位到具体代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;cheap-module-source-map&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●提升打包构建速度\"><a href=\"#●提升打包构建速度\" class=\"headerlink\" title=\"●提升打包构建速度\"></a>●提升打包构建速度</h4><p>（1）oneOf</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">    <span class=\"attr\">oneOf</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">include</span>: <span class=\"variable constant_\">XXXX</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>（2） include exclude<br>（3）hotMdouleReplacement（HMR）<br>（4）cache</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每次js打包都要经过eslint和babel编译，速度比较慢，可以缓存之前的eslint检查和babel编译结果，这样二次打包速度会快很多</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检查文件的根目录</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../src&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">      <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">      <span class=\"comment\">// 缓存目录</span></span><br><span class=\"line\">      <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">        __dirname,</span><br><span class=\"line\">        <span class=\"string\">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;)]</span><br></pre></td></tr></table></figure>\n\n<p>（5）Thead多核，多进程</p>\n<h4 id=\"●减少代码体积\"><a href=\"#●减少代码体积\" class=\"headerlink\" title=\"●减少代码体积\"></a>●减少代码体积</h4><p>（1）tree shaking<br>（2）Image Minimizer<br>当项目中引入图片过多时（针对本地文件）可以进行压缩</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i image-minimizer-webpack-plugin imagemin -D</span><br><span class=\"line\"><span class=\"comment\">// 无损压缩</span></span><br><span class=\"line\">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br><span class=\"line\"><span class=\"comment\">// 有损压缩</span></span><br><span class=\"line\">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ImageMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">      <span class=\"comment\">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: threads, <span class=\"comment\">// 开启多进程</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">// 压缩图片</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ImageMinimizerPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">implementation</span>: <span class=\"title class_\">ImageMinimizerPlugin</span>.<span class=\"property\">imageminGenerate</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">              [<span class=\"string\">&quot;gifsicle&quot;</span>, &#123; <span class=\"attr\">interlaced</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">              [<span class=\"string\">&quot;jpegtran&quot;</span>, &#123; <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">              [<span class=\"string\">&quot;optipng&quot;</span>, &#123; <span class=\"attr\">optimizationLevel</span>: <span class=\"number\">5</span> &#125;],</span><br><span class=\"line\">              [</span><br><span class=\"line\">                <span class=\"string\">&quot;svgo&quot;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    <span class=\"string\">&quot;preset-default&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;prefixIds&quot;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      <span class=\"attr\">name</span>: <span class=\"string\">&quot;sortAttrs&quot;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">xmlnsOrder</span>: <span class=\"string\">&quot;alphabetical&quot;</span>,</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"●优化代码运行性能\"><a href=\"#●优化代码运行性能\" class=\"headerlink\" title=\"●优化代码运行性能\"></a>●优化代码运行性能</h4><p>（1）code split<br>●分割文件：将打包生成的文件进行分割，生产多个js文件<br>●按需加载，需要哪个文件就加载哪个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代码分割配置</span></span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"comment\">// 对所有模块都进行分割</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}